#
# Checking the conversions with older 0.0.x modules
#

use v6.d;
use Test;
use lib '../version-old/lib';
use lib 'lib';
use Date::Calendar::Strftime:ver<0.1.0>;
use Date::Calendar::Aztec;
use Date::Calendar::Aztec::Cortes;
use Date::Calendar::Bahai;
use Date::Calendar::Bahai::Astronomical;
use Date::Calendar::Coptic;
use Date::Calendar::Ethiopic;
use Date::Calendar::Hebrew;
use Date::Calendar::Hijri;
use Date::Calendar::Gregorian;
use Date::Calendar::FrenchRevolutionary;
use Date::Calendar::FrenchRevolutionary::Arithmetic;
use Date::Calendar::FrenchRevolutionary::Astronomical;
use Date::Calendar::Julian;
use Date::Calendar::Julian::AUC;
use Date::Calendar::Maya;
use Date::Calendar::Maya::Astronomical;
use Date::Calendar::Maya::Spinden;
use Date::Calendar::Persian;
use Date::Calendar::Persian::Astronomical;

my @data-greg = (
       (1444, 10, 24, after-sunset,   'gr', "Sunday 14 May 2023"          , "Ahd 23 Shw 1444 ☼", "2023-05-14 shift to previous day", '2023-05-14')
     , (1444, 10, 24, before-sunrise, 'gr', "Monday 15 May 2023"          , "Ith 24 Shw 1444 ☼", "2023-05-15 shift to daylight"    , '2023-05-15')
     , (1444, 10, 24, daylight,       'gr', "Monday 15 May 2023"          , "Ith 24 Shw 1444 ☼", "2023-05-15 no problem"           , '2023-05-15')
            );

my @data-maya = (
       (1444, 11, 13, after-sunset,   'm0', " 2 Zotz 9 Ix"          , "Kha 12 Qid 1444 ☼", "2023-06-01 shift to the previous date, wrong clerical date, should be  2 Zotz 10 Men")
     , (1444, 11, 13, before-sunrise, 'm0', " 3 Zotz 10 Men"        , "Jum 13 Qid 1444 ☼", "2023-06-02 wrong intermediate date, should be  2 Zotz 10 Men")
     , (1444, 11, 13, daylight,       'm0', " 3 Zotz 10 Men"        , "Jum 13 Qid 1444 ☼", "2023-06-02 no problem")
     , (1440,  7, 14, after-sunset,   'm1', "11 Cumku 7 Etznab"     , "Arb 13 Raj 1440 ☼", "2019-03-20 shift to the previous date, wrong clerical date, should be 11 Cumku 8 Cauac")
     , (1440,  7, 14, before-sunrise, 'm1', "12 Cumku 8 Cauac"      , "Kha 14 Raj 1440 ☼", "2019-03-21 wrong intermediate date, should be 11 Cumku 8 Cauac")
     , (1440,  7, 14, daylight,       'm1', "12 Cumku 8 Cauac"      , "Kha 14 Raj 1440 ☼", "2019-03-21 no problem")
     , (1443,  3,  4, after-sunset,   'm2', "12 Yax 7 Ix"           , "Ahd 03 R.A 1443 ☼", "2021-10-10 shift to the previous date, wrong clerical date, should be 12 Yax 8 Men")
     , (1443,  3,  4, before-sunrise, 'm2', "13 Yax 8 Men"          , "Ith 04 R.A 1443 ☼", "2021-10-11 wrong intermediate date, should be 12 Yax 8 Men")
     , (1443,  3,  4, daylight,       'm2', "13 Yax 8 Men"          , "Ith 04 R.A 1443 ☼", "2021-10-11 no problem")
     , (1442, 10, 25, after-sunset,   'a0', " 5 Teotleco 11 Tochtli", "Sab 24 Shw 1442 ☼", "2021-06-05 shift to the previous date, wrong clerical date, should be  5 Teotleco 12 Atl")
     , (1442, 10, 25, before-sunrise, 'a0', " 6 Teotleco 12 Atl"    , "Ahd 25 Shw 1442 ☼", "2021-06-06 wrong intermediate date, should be  5 Teotleco 12 Atl")
     , (1442, 10, 25, daylight,       'a0', " 6 Teotleco 12 Atl"    , "Ahd 25 Shw 1442 ☼", "2021-06-06 no problem")
     , (1441,  5, 24, after-sunset,   'a1', "10 Toxcatl 5 Tochtli"  , "Ahd 23 J.A 1441 ☼", "2020-01-19 shift to the previous date, wrong clerical date, should be 10 Toxcatl 6 Atl")
     , (1441,  5, 24, before-sunrise, 'a1', "11 Toxcatl 6 Atl"      , "Ith 24 J.A 1441 ☼", "2020-01-20 wrong intermediate date, should be 10 Toxcatl 6 Atl")
     , (1441,  5, 24, daylight,       'a1', "11 Toxcatl 6 Atl"      , "Ith 24 J.A 1441 ☼", "2020-01-20 no problem")
            );

my @data-others = (
       (1444,  8,  3, after-sunset,   'ba', "Istijlál 17 Mul 0179"        , "Kha 02 Sha 1444 ☼", "2023-02-23 shift to previous day")
     , (1444,  8,  3, before-sunrise, 'ba', "Istiqlál 18 Mul 0179"        , "Jum 03 Sha 1444 ☼", "2023-02-24 shift to daylight")
     , (1444,  8,  3, daylight,       'ba', "Istiqlál 18 Mul 0179"        , "Jum 03 Sha 1444 ☼", "2023-02-24 no problem")
     , (1444, 10,  1, after-sunset,   'be', "Istiqlál 13 Jal 0180"        , "Jum 30 Ram 1444 ☼", "2023-04-21 shift to previous day")
     , (1444, 10,  1, before-sunrise, 'be', "Jalál 14 Jal 0180"           , "Sab 01 Shw 1444 ☼", "2023-04-22 shift to daylight")
     , (1444, 10,  1, daylight,       'be', "Jalál 14 Jal 0180"           , "Sab 01 Shw 1444 ☼", "2023-04-22 no problem")
     , (1444,  7, 23, after-sunset,   'co', "Pesnau 06 Mes 1739"          , "Ith 22 Raj 1444 ☼", "2023-02-13 shift to previous day")
     , (1444,  7, 23, before-sunrise, 'co', "Pshoment 07 Mes 1739"        , "Thl 23 Raj 1444 ☼", "2023-02-14 shift to daylight")
     , (1444,  7, 23, daylight,       'co', "Pshoment 07 Mes 1739"        , "Thl 23 Raj 1444 ☼", "2023-02-14 no problem")
     , (1440,  1, 16, after-sunset,   'et', "Hamus 16 Mes 2011"           , "Arb 15 Muh 1440 ☼", "2018-09-26 shift to previous day")
     , (1440,  1, 16, before-sunrise, 'et', "Arb 17 Mes 2011"             , "Kha 16 Muh 1440 ☼", "2018-09-27 shift to daylight")
     , (1440,  1, 16, daylight,       'et', "Arb 17 Mes 2011"             , "Kha 16 Muh 1440 ☼", "2018-09-27 no problem")
     , (1442,  3, 18, after-sunset,   'fr', "Tridi 13 Bru 0229"           , "Thl 17 R.A 1442 ☼", "2020-11-03 shift to previous day")
     , (1442,  3, 18, before-sunrise, 'fr', "Quartidi 14 Bru 0229"        , "Arb 18 R.A 1442 ☼", "2020-11-04 shift to daylight")
     , (1442,  3, 18, daylight,       'fr', "Quartidi 14 Bru 0229"        , "Arb 18 R.A 1442 ☼", "2020-11-04 no problem")
     , (1444,  7, 27, after-sunset,   'fa', "Nonidi 29 Plu 0231"          , "Jum 26 Raj 1444 ☼", "2023-02-17 shift to previous day")
     , (1444,  7, 27, before-sunrise, 'fa', "Décadi 30 Plu 0231"          , "Sab 27 Raj 1444 ☼", "2023-02-18 shift to daylight")
     , (1444,  7, 27, daylight,       'fa', "Décadi 30 Plu 0231"          , "Sab 27 Raj 1444 ☼", "2023-02-18 no problem")
     , (1441,  4,  8, after-sunset,   'fe', "Quartidi 14 Fri 0228"        , "Kha 07 R.T 1441 ☼", "2019-12-05 shift to previous day")
     , (1441,  4,  8, before-sunrise, 'fe', "Quintidi 15 Fri 0228"        , "Jum 08 R.T 1441 ☼", "2019-12-06 shift to daylight")
     , (1441,  4,  8, daylight,       'fe', "Quintidi 15 Fri 0228"        , "Jum 08 R.T 1441 ☼", "2019-12-06 no problem")
     , (1445, 12, 17, after-sunset,   'he', "Yom Rishon 17 Siv 5784"      , "Ahd 16 Hij 1445 ☼", "2024-06-23 shift to previous day")
     , (1445, 12, 17, before-sunrise, 'he', "Yom Sheni 18 Siv 5784"       , "Ith 17 Hij 1445 ☼", "2024-06-24 shift to daylight")
     , (1445, 12, 17, daylight,       'he', "Yom Sheni 18 Siv 5784"       , "Ith 17 Hij 1445 ☼", "2024-06-24 no problem")
     , (1443,  6,  4, after-sunset,   'jl', "Friday 25 Dec 2021"          , "Jum 03 J.T 1443 ☼", "2022-01-07 shift to previous day")
     , (1443,  6,  4, before-sunrise, 'jl', "Saturday 26 Dec 2021"        , "Sab 04 J.T 1443 ☼", "2022-01-08 shift to daylight")
     , (1443,  6,  4, daylight,       'jl', "Saturday 26 Dec 2021"        , "Sab 04 J.T 1443 ☼", "2022-01-08 no problem")
     , (1444,  8, 18, after-sunset,   'jc', "Friday 25 Feb 2776"          , "Jum 17 Sha 1444 ☼", "2023-03-10 shift to previous day")
     , (1444,  8, 18, before-sunrise, 'jc', "Saturday 26 Feb 2776"        , "Sab 18 Sha 1444 ☼", "2023-03-11 shift to daylight")
     , (1444,  8, 18, daylight,       'jc', "Saturday 26 Feb 2776"        , "Sab 18 Sha 1444 ☼", "2023-03-11 no problem")
     , (1445, 10,  9, after-sunset,   'pe', "Chahar shanbe 29 Far 1403"   , "Arb 08 Shw 1445 ☼", "2024-04-17 shift to previous day")
     , (1445, 10,  9, before-sunrise, 'pe', "Panj shanbe 30 Far 1403"     , "Kha 09 Shw 1445 ☼", "2024-04-18 shift to daylight")
     , (1445, 10,  9, daylight,       'pe', "Panj shanbe 30 Far 1403"     , "Kha 09 Shw 1445 ☼", "2024-04-18 no problem")
     , (1444, 11, 17, after-sunset,   'pa', "Do shanbe 15 Kho 1402"       , "Ith 16 Qid 1444 ☼", "2023-06-05 shift to previous day")
     , (1444, 11, 17, before-sunrise, 'pa', "Se shanbe 16 Kho 1402"       , "Thl 17 Qid 1444 ☼", "2023-06-06 shift to daylight")
     , (1444, 11, 17, daylight,       'pa', "Se shanbe 16 Kho 1402"       , "Thl 17 Qid 1444 ☼", "2023-06-06 no problem")
            );

my %class =   a0 => 'Date::Calendar::Aztec'
            , a1 => 'Date::Calendar::Aztec::Cortes'
            , ba => 'Date::Calendar::Bahai'
            , be => 'Date::Calendar::Bahai::Astronomical'
            , gr => 'Date::Calendar::Gregorian'
            , co => 'Date::Calendar::Coptic'
            , et => 'Date::Calendar::Ethiopic'
            , fr => 'Date::Calendar::FrenchRevolutionary'
            , fa => 'Date::Calendar::FrenchRevolutionary::Arithmetic'
            , fe => 'Date::Calendar::FrenchRevolutionary::Astronomical'
            , he => 'Date::Calendar::Hebrew'
            , hi => 'Date::Calendar::Hijri'
            , jl => 'Date::Calendar::Julian'
            , jc => 'Date::Calendar::Julian::AUC'
            , m0 => 'Date::Calendar::Maya'
            , m1 => 'Date::Calendar::Maya::Astronomical'
            , m2 => 'Date::Calendar::Maya::Spinden'
            , pe => 'Date::Calendar::Persian'
            , pa => 'Date::Calendar::Persian::Astronomical'
            ;

my %ver   =   a0 => '0.0.3'
            , a1 => '0.0.3'
            , ba => '0.0.2'
            , pe => '0.0.2'
            , be => '0.0.2'
            , co => '0.0.3'
            , et => '0.0.3'
            , fr => '0.0.6'
            , fa => '0.0.6'
            , fe => '0.0.6'
            , gr => '0.0.2'
            , he => '0.0.4'
            , hi => '0.0.2'
            , jl => '0.0.4'
            , jc => '0.0.4'
            , m0 => '0.0.3'
            , m1 => '0.0.3'
            , m2 => '0.0.3'
            , pe => '0.0.2'
            , pa => '0.0.2'
            ;

plan 15 × @data-greg.elems + 12 × @data-others.elems + 12 × @data-maya.elems;

for (|@data-greg, |@data-others) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Hijri $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%A %d %b %Y"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<hi>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Hijri $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%A %d %b %Y"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<hi>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Hijri $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

for (@data-maya) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Hijri $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);
  my Str $str1 = $d1.strftime("%a %d %b %Y %Ep");

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%e %B %V %A"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<hi>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push $str1 to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Hijri $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull $str1 to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%e %B %V %A"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<hi>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push $str1 to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Hijri $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull $str1 to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

# Conversion with core class Date: only push-pull tests
for (@data-greg) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result, $str4) = $datum;
  my Date::Calendar::Hijri $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  my $d2 = $d1.to-date('Date');
  is($d2.gist, $str4, "testing push from $year-$month-$day to $str4");
  my Date::Calendar::Hijri $d3 .= new-from-date($d2);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull from $year-$month-$day to Gregorian $str4 and then $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');
}

done-testing;
